/**
* Solution to Question 2 f of Worksheet 2
* Program uses Simpson's Rule to evaluate the integral given in q2c.
* Data is output to file (name defined in command line arguments).
* 
* User must supply desired number of significant figures to be correct to, 
* expected value, and output file name in the following format:
* Eg) > ./q2f.o 8 47.478863763554 q2f-01.dat
* 
* Name:		Samuel Delacruz
* ID:		1090154
* Email:	SJD054@bham.ac.uk
* Date:		02-11-2013
**/
#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <iomanip>
#include <string>

using namespace std;

//FUNCTION DECLARATIONS
void resultsToFile(vector<vector<double> >&,string);
void resultsToScreen(vector<vector<double> >&);

double f(double);
double simpson(double,double,int);
double d4f(double);
int get_n_max(int);
vector<vector<double> > getResults(int,int,double,double,double);

//CONSTANTS (the integration limits of the problem)
const double X_MIN = 0.0f;
const double X_MAX = 2.0f;
const int N_MIN = 2;//minimum number of segments to split f(x) into
const double PI = acos(-1.0f);

int f_counter = 0;

int main(int argc, char* argv[]){
	
	//BEGIN COMMAND LINE ARGUMENT CHECKING
	if(argc < 4){
		//inform the user of correct usage
		cout << "Correct usage: " << argv[0] << " sf expected_value output_file_name" << endl;
		return -1;
	}
	
	//Parse user input
	int sf = atoi(argv[1]);
	double expected = atof(argv[2]);
	string filename = argv[3];
	//check for positive sf value
	if(sf < 0){
		cout << "Error: Positive sf only" << endl;
		return -1;
	}
	//END COMMAND LINE ARGUMENT CHECKING
	
	cout	<< 	"You entered:\n"
			<<	"sf = " << sf << endl
			<<	"Expected value = "	<< expected << endl
			<<	"Output file = "	<< filename << endl
			<<	"n_max will be: "	<< get_n_max(sf) << endl
			<<	"Calculating results set..."	<< endl;
			
	vector<vector<double> > results = getResults(N_MIN,get_n_max(sf),X_MAX,X_MIN,expected);
	
	cout	<<	"Printing results to terminal...\n\n";
	resultsToScreen(results);
	
	cout	<<	"Saving results to file... (" << filename <<")\n\n";
	resultsToFile(results,filename);
	
	cout	<< "Results saved to " << filename << endl << "Exiting...\n";
	return 0;
}

double f(double x){
	f_counter++;//increment function call counter
	return exp((-1.0f)*x)*sin(x);

}

/**
* Function for calculating value of 4th derivative of f(x)
**/
double d4f(double x){

	return (-4.0*exp(-x)*sin(x));

}

int get_n_max(int sf){
	
	//equation for number of n for given significant figures (see report)
	//minima of d4f found at PI/4, using it as constant in error formula
	return (int) ceil(
					pow(
						(
							pow(
								(X_MAX - X_MIN),
								5.0
							)
							*pow(
								10.0,
								(double)sf - 1.0f
							)
						)
						/180
						*abs(
							d4f(
								0.25
								*PI
							)
						)
						,0.25
					)
				);
	

}

vector<vector<double> > getResults(int n_min, int n_max, double x_n, double x_0, double expected){
	
	//We will be raising n logarithmically, so size vector appropriately
	vector<double> ns((int) ceil(log10(n_max)/log10(n_min)));
	vector<double> is(ns.size());
	vector<double> errors(ns.size());
	
	for(int i = 0; i < ns.size(); i++){
		int n = (int) pow((double)n_min,i+1);//want to start from n_min, not 1.
		ns.at(i) = n;
		is.at(i) = simpson(x_n,x_0,n);
		errors.at(i) = abs(expected - is.at(i));
	
	}
	
	vector<vector<double> > toret(3);
	
	toret.at(0) = ns;
	toret.at(1) = is;
	toret.at(2) = errors;
	
	return toret;
}

double simpson (double x_n, double x_0, int n){

	double h = (x_n - x_0) / (double)n;
	
	double sum = f(x_0);
	
	for(int i = 1; i < n; i++){
		//check for even i
		if(i%2==0){
			sum += 2.0f * f(x_0 + ( (double)i * h) );
		}
		//otherwise odd i
		else{
			sum += 4.0f * f(x_0 + ( (double)i * h) );
		}

	}
	
	sum += f(x_n);
	
	return sum * (h/3);

}


void resultsToScreen(vector<vector<double> >& results){

	//print headers
	cout << "\nn\tResult\tError\n";
	
	//Iterate over each n value
	for(int n = 0; n < results.at(0).size(); n++){
		
		//Iterate over columns
		for(int j = 0; j < results.size(); j++){

			cout << setprecision(15) << scientific << results.at(j).at(n) << "\t";

		}

		//newline
		cout << endl;
		cout << f_counter << endl;//print function call counter

	}
}

void resultsToFile(vector<vector<double> >& results, string fname){

	ofstream dataFile(fname.c_str());

	if(dataFile.is_open()){
		
		//Iterate over each n value
		for(int n = 0; n < results.at(0).size(); n++){
			
			//Iterate over columns
			for(int j = 0; j < results.size(); j++){

				dataFile << setprecision(15) << scientific << results.at(j).at(n) << "\t";

			}

			//newline
			dataFile << endl;
			dataFile << f_counter << endl;//print function call counter
		}
	}
}

