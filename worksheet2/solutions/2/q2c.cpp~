/**
* Solution to Question 2 c of Worksheet 2
* Program suses the trapezium rule to evaluate the integral given in q2c.
* Data is output to file (name defined in command line arguments).
* 
* User should supply minimum and maximum number of subintervals, 
* expected value, and output file name in the following format:
* Eg) > ./q2c.o 2 100000000 47.478863763554 q2c-01.dat
* 
* Name:		Samuel Delacruz
* ID:		1090154
* Email:	SJD054@bham.ac.uk
* Date:		02-11-2013
**/
#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <iomanip>
#include <string>

using namespace std;

//FUNCTION DECLARATIONS
void resultsToFile(vector<vector<double> >&,string);
void resultsToScreen(vector<vector<double> >&);

double f(double);
double trapezium(double,double,int);
vector<vector<double> > getResults(int,int,double,double,double);

//CONSTANTS
const double X_MIN = 0.0f;
const double X_MAX = 2.0f;


int main(int argc, char* argv[]){
	
	//BEGIN COMMAND LINE ARGUMENT CHECKING
	if(argc < 5){
		//inform the user of correct usage
		cout << "Correct usage: " << argv[0] << " n_min n_max expected_value output_file_name" << endl;
		return -1;
	}
	
	//Parse user input
	int n_min = atoi(argv[1]);
	int n_max = atoi(argv[2]);
	double expected = atof(argv[3]);
	string filename = argv[4];
	//check for positive N
	if(n_min < 0 || n_max < 0){
	
		cout << "Error: Positive n only" << endl;
		return -1;
	}
	//Check n_max > n_min
	if( !(n_max > n_min) ){
		cout << "Error: n_max must be larger than n_min" << endl;
		return -1;
	}
	//END COMMAND LINE ARGUMENT CHECKING
	
	cout	<< 	"You entered: "
			<<	"n_min = " << n_min << endl
			<<	"n_max = " << n_max << endl
			<<	"Expected value = "	<< expected << endl
			<<	"Output file = "	<< filename << endl
			<<	"Calculating results set..."	<< endl;
			
	vector<vector<double> > results = getResults(n_min,n_max,X_MAX,X_MIN,expected);
	
	cout	<<	"Printing results to terminal...\n\n";
	resultsToScreen(results);
	
	cout	<<	"Saving results to file... (" << filename <<")\n\n";
	resultsToFile(results,filename);
	
	cout	<< "Results saved to " << filename << endl << "Exiting...\n";
	return 0;
}

double f(double x){

	return exp((-1.0f)*x)*sin(x);

}

vector<vector<double> > getResults(int n_min, int n_max, double x_n, double x_0, double expected){
	
	//We will be raising n logarithmically, so size vector appropriately
	vector<double> ns((int) ceil(log10(n_max)/log10(n_min)));
	vector<double> is(ns.size());
	vector<double> errors(ns.size());
	
	for(int i = 0; i < ns.size(); i++){
		int n = (int) pow((double)n_min,i+1);//want to start from n_min, not 1.
		ns.at(i) = n;
		is.at(i) = trapezium(x_n,x_0,n);
		errors.at(i) = abs(expected - is.at(i));
	
	}
	
	vector<vector<double> > toret(3);
	
	toret.at(0) = ns;
	toret.at(1) = is;
	toret.at(2) = errors;
	
	return toret;
}

double trapezium (double x_n, double x_0, int n){

	double h = (x_n - x_0) / (double)n;
	
	double result = 0.0f;
	
	for(int i = 1; i < n; i++){
	
		result += f(x_0+((double)i*h));
	
	}
	
	result = 0.5*h*(f(x_0) + f(x_n) + 2.0f*result);
	
	return result;

}

void resultsToScreen(vector<vector<double> >& results){

	//print headers
	cout << "\nn\tResult\tError\n";
	
	//Iterate over each n value
	for(int n = 0; n < results.at(0).size(); n++){
		
		//Iterate over columns
		for(int j = 0; j < results.size(); j++){

			cout << setprecision(15) << scientific << results.at(j).at(n) << "\t";

		}

		//newline
		cout << endl;

	}
}

void resultsToFile(vector<vector<double> >& results, string fname){

	ofstream dataFile(fname.c_str());

	if(dataFile.is_open()){
		
		//Iterate over each n value
		for(int n = 0; n < results.at(0).size(); n++){
			
			//Iterate over columns
			for(int j = 0; j < results.size(); j++){

				dataFile << setprecision(15) << scientific << results.at(j).at(n) << "\t";

			}

			//newline
			dataFile << endl;

		}
	}
}

